services:
  kong:
    image: kong:latest
    depends_on:
      - auth_service
    volumes:
      - ./kong:/usr/local/kong/declarative # injectarea fișierului de configurare la calea specificată
    environment:
      KONG_DATABASE: 'off' # obligatoriu, dacă se vrea modul DB-less
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml # trebuie specificat unde anume se va găsi fișierul de configurare
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    ports:
      - 8000:8000 # expunerea porturilor
      - 8001:8001 # expunerea porturilor
      - 8443:8443
    deploy:
      placement:
        constraints: [node.role == manager] # constrângerea de rulare doar pe manager, pentru a nu exista conflict la nivel de volume
    networks:
      - internal
      - prometheus_kong
################################################# 
  auth_service:
    image: flaviusmazilu/auth_service
    depends_on:
      - io_service
    ports:
      - "8081:8080"
      - "5001:5000"
    networks:
      internal:
        aliases:
          - auth_svc
################################################# 
  io_service:
    image: flaviusmazilu/io_service
    depends_on:
      - db
    ports:
      - "8080:8080"
      - "5000:5000"
    networks:
      internal:
        aliases:
          - io_svc
    deploy:
      replicas: 1
###############################################
  db:
    image: postgres:13.2-alpine
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: mobylab-app
      POSTGRES_DB: mobylab-app
      POSTGRES_PASSWORD: mobylab-app
    volumes:
      - db-volume:/var/lib/postgresql/data
    networks:
      internal:
        aliases:
          - db_svc
      database-admin:
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
###############################################
  portainer_agent:
    image: portainer/agent:2.11.1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - agent_network
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]
###############################################
  portainer:
    image: portainer/portainer-ce:2.11.1
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    ports:
      - "9443:9443"
      - "9000:9000"
      - "7000:8000"
    volumes:
      - portainer_data:/data
    networks:
      - agent_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
###############################################
  adminer:
    image: adminer
    ports:
        - 8090:8080
    networks:
        - database-admin
###############################################
  node_exporter:
    image: prom/node-exporter
    deploy:
        mode: global
    volumes:
        - /proc:/host/proc:ro
        - /sys:/host/sys:ro
        - /:/rootfs:ro
    command:
        - '--path.procfs=/host/proc'
        - '--path.rootfs=/rootfs'
        - '--path.sysfs=/host/sys'
        - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
        - 9100:9100
    networks:
        - prometheus_kong
###############################################
  prometheus:
    image: prom/prometheus
    volumes:
        - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
        - 9090:9090
    networks:
      - prometheus_kong
      - grafana_prometheus
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
###############################################
  grafana:
    image: grafana/grafana:latest
    networks:
      - grafana_prometheus
    ports:
      - 3000:3000
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure

volumes:
    db-volume:
    portainer_data:
    grafana_data:

networks:
    internal:
    agent_network:
      driver: overlay
      attachable: true
    database-admin:
    prometheus_kong:
    grafana_prometheus: